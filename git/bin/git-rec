#!/usr/bin/env bash

set -euo pipefail

options="\
%s [--no-git] [--root=path] -- command

Run git command recursively inside all git repositories under the current directory.

Execute 'git config --local git-rec.ignore true' inside a repository to ignore it.
--
h,help Show the help

 Options
n,no-git    Do not imply git command (i.e. do not prefix 'git' to command)
r,root=path Specify another root directory"

options="$(printf "$options" "${0##*/}")"

eval "$(echo "$options" | git rev-parse --parseopt -- "$@" || echo exit $?)"

while (($# > 0)); do
  opt="$1"
  shift

  case "$opt" in
    -r)
      root="$1"
      shift
      ;;

    -n)
      no_implicit_git=
      ;;

    --)
      break
      ;;

    *)
      >&2 printf 'Unexpected option:: %s\n' "$opt"
      exit 1
      ;;
  esac
done

command=()
if [[ ! -v no_implicit_git ]]; then
  command=(git)
fi

if (($# == 0)); then
  >&2 printf 'Need command\n'
  exit 2
fi

command+=("$@")
command_as_string="$(printf "%q " "${command[@]}")"
command_as_string="${command_as_string% }"

if [[ -t 1 ]]; then
  red='\e[1;31m'
  green='\e[1;32m'
  yellow='\e[1;33m'
  reset='\e[0m'
else
  red=
  green=
  yellow=
  reset=
fi

root="${root:-$PWD}"

printf 'Running %b%s%b in git repositories below %b%s%b:\n' \
       "$red" \
       "$command_as_string" \
       "$reset" \
       "$green" \
       "$root" \
       "$reset"

exit_status=0

while IFS= read -d $'\0' -r dotgit; do
  repo="${dotgit%.git}"

  # Detect whether this is a submodule directory and skip.
  if [[ -f "$dotgit" ]] && \
     grep --quiet '\.git/modules/' "$dotgit"; then
    printf '\n%bIgnored submodule directory%b %b%s%b\n' \
           "$yellow" \
           "$reset" \
           "$green" \
           "$repo" \
           "$reset"
    continue
  fi

  # Detect whether this repo is ignored and skip.
  if [[ "$(git -C "$repo" config --local --get git-rec.ignore)" == 'true' ]]; then
    printf '\n%bIgnored repository%b %b%s%b\n' \
           "$yellow" \
           "$reset" \
           "$green" \
           "$repo" \
           "$reset"
    continue
  fi

  printf '\nRunning %b%s%b in %b%s%b\n' \
         "$red" \
         "$command_as_string" \
         "$reset" \
         "$green" \
         "$repo" \
         "$reset"

  if pushd "$repo" > /dev/null; then
    if "${command[@]}"; then
      printf '%b✔%b Success\n' "$green" "$reset"
    else
      exit_status=$?

      printf '%b✘%b Failed with exit status %d\n' \
             "$red" \
             "$reset" \
             "$exit_status"
    fi

    popd > /dev/null
  fi
done < <(find "$root" \( -type d -o -type f \) -name .git -print0 | sort --zero-terminated)

exit $exit_status
