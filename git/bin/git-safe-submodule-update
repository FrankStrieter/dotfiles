#!/usr/bin/env bash

set -euo pipefail

# This is just a draft and likely not a complete solution, especially if you use
# nested submodules.

colors() {
  local -A colors
  colors[red]="$(git    config --get-color ''                      'bold red')"
  colors[green]="$(git  config --get-color ''                      'bold green')"
  colors[yellow]="$(git config --get-color ''                      'bold yellow')"
  colors[head]="$(git   config --get-color 'color.decorate.HEAD'   'bold cyan')"
  colors[branch]="$(git config --get-color 'color.decorate.branch' 'bold green')"
  colors[reset]="$(git  config --get-color ''                      'reset')"

  local key
  for key in "${!colors[@]}"; do
    printf 'c_%s=%b ' "$key" "${colors[$key]}"
  done
}

check() {
  local check success

  # git submodule foreach fails as soon as we exit 1 for any check.
  # To communicate to this script whether any check failed, we use a temporary
  # file and delete it as soon as any check failed. After git submodule foreach
  # we check whether the file still exists. If it's gone, we failed.
  success="$(mktemp)"

  IFS='' read -r -d '' check <<"EOF" || true
    head="$(git show --color -1 --oneline --no-patch)"
    ref="$(git name-rev --name-only --no-undefined HEAD 2> /dev/null)"

    if [[ -n "$ref" ]]; then
      printf '  %b%s%b %bHEAD%b is reachable by %b%s%b: %s\n' \
        $c_green \
        ✔ \
        $c_reset \
        $c_head \
        $c_reset \
        $c_branch \
        "$ref" \
        $c_reset \
        "$head"
    else
      printf '  %b%s%b %bHEAD%b is not reachable by any ref: %s\n' \
        $c_red \
        ✖ \
        $c_reset \
        $c_head \
        $c_reset \
        "$head"

      if [[ -n "${dry_run:-}" || -n "${force_update:-}" ]]; then
        :
      else
        rm -f "$success"
      fi
    fi
EOF

  env "$@" "success=$success" git submodule foreach --recursive "$check"

  [[ -f "$success" ]]
}

update() {
  local arg
  for arg in "$@"; do
    local "$arg"
  done

  if [[ -n "${dry_run:-}" ]]; then
    printf '%b%s%b Dry run requested, omitting submodule update\n' \
      "$c_yellow" \
      ! \
      "$c_reset"

    return
  fi

  if [[ "$status" == 0 ]]; then
    if [[ -n "${force_update:-}" ]]; then
      printf '%b%s%b Forced update, updating submodules\n' \
        "$c_yellow" \
        ! \
        "$c_reset"
    else
      printf '%b%s%b All checks passed, updating submodules\n' \
        "$c_green" \
        ✔ \
        "$c_reset"
    fi

    git submodule update
  else
    printf '%b%s%b Some checks failed, refusing to update submodules\n' \
      "$c_red" \
      ✖ \
      "$c_reset"

    return 1
  fi
}

run() {
  local -a args
  args=( $(colors) )

  local options="\
%s [--dry-run] [--force]

Checks whether submodule HEAD commits are reachable by branches or tags before
running 'git submodule update'. This prevents these commits from becoming
unreachable by the submodule update.
--
h,help Show the help

 Options
n,dry-run Dry run, check but do not update submodules
f,force   Force submodule update regardless of submodule HEAD reachability"

  options="$(printf "$options" "${0##*/}")"

  eval "$(echo "$options" | git rev-parse --parseopt -- "$@" || echo exit $?)"

  while (($# > 0)); do
    opt="$1"
    shift

    case "$opt" in
      -n)
        args+=('dry_run=true')
        ;;

      -f)
        args+=('force_update=true')
        ;;

      --)
        break
        ;;

      *)
        >&2 printf 'Unexpected option:: %s\n' "$opt"
        exit 1
        ;;
    esac
  done

  local status
  if check "${args[@]}"; then
    status=0
  else
    status=1
  fi

  update "status=$status" "${args[@]}"
}

run "$@"
