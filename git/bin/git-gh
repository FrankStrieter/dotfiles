#!/usr/bin/env bash

set -euo pipefail

options="\
%s [--commit=commit-ish] [--path=path] [--resolve] [username/repo]

Open the GitHub page for the current repository. If there is no terminal attached,
only print the URL that would be openend.
--
h,help Show the help
t,test Test mode, shows example usage. For this to work, this script must reside in a git repository with a GitHub remote.

 Page display options
c,commit=commit-ish Open page for commit
r,resolve           When --commit is given a ref (i.e. branch, tag or HEAD), resolve it to a SHA
p,path=path         Open page for directory or file. Path are relative to the current directory. Implies current branch or HEAD commit if --commit is omitted."

options="$(printf "$options" "${0##*/}")"

eval "$(echo "$options" | git rev-parse --parseopt -- "$@" || echo exit $?)"

while (($# > 0)); do
  opt="$1"
  shift

  case "$opt" in
    -c)
      revision="$1"
      shift
      ;;

    -r)
      revision_as_sha=
      ;;

    -p)
      path="$1"
      shift
      ;;

    -t)
      selftest=
      ;;

    --)
      break
      ;;

    *)
      >&2 printf 'Unexpected option:: %s\n' "$opt"
      exit 1
      ;;
  esac
done

selftest() {
  local self self_dir head_short head master
  local -A tests

  self="${0##*/}"
  pushd "${0%$self}" > /dev/null

  self_dir="$(git rev-parse --show-prefix)"
  self_dir="${self_dir%/}"

  head_short="$(git rev-parse --short HEAD)"
  head="$(git rev-parse HEAD)"
  master="$(git rev-parse master)"

  tests=(
    [' ']=https://github.com/agross/dotfiles
    ['holman/dotfiles']=https://github.com/holman/dotfiles
    ['-c master']=https://github.com/agross/dotfiles/commit/master
    ['-c master -r']=https://github.com/agross/dotfiles/commit/$master
    ['-c HEAD']=https://github.com/agross/dotfiles/commit/HEAD
    ['-c HEAD -r']=https://github.com/agross/dotfiles/commit/$head
    ["-c $head_short"]=https://github.com/agross/dotfiles/commit/$head
    ["-c $head_short -r"]=https://github.com/agross/dotfiles/commit/$head
    ['-p .']=https://github.com/agross/dotfiles/tree/master/$self_dir
    ["-p "$self""]=https://github.com/agross/dotfiles/blob/master/$self_dir/$self
    ["-c master -p "$self""]=https://github.com/agross/dotfiles/tree/master/$self_dir
    ['-c master -p . -r']=https://github.com/agross/dotfiles/tree/$master/$self_dir
    ["-c master -p "$self""]=https://github.com/agross/dotfiles/blob/master/$self_dir/$self
    ["-c master -p "$self" -r"]=https://github.com/agross/dotfiles/blob/$master/$self_dir/$self
    ['-c HEAD -p .']=https://github.com/agross/dotfiles/tree/HEAD/$self_dir
    ['-c HEAD -p . -r']=https://github.com/agross/dotfiles/tree/$head/$self_dir
    ["-c HEAD -p "$self""]=https://github.com/agross/dotfiles/blob/HEAD/$self_dir/$self
    ["-c HEAD -p "$self" -r"]=https://github.com/agross/dotfiles/blob/$head/$self_dir/$self
    ["-c $head_short -p ."]=https://github.com/agross/dotfiles/tree/$head/$self_dir
    ["-c $head_short -p . -r"]=https://github.com/agross/dotfiles/tree/$head/$self_dir
    ["-c $head_short -p "$self""]=https://github.com/agross/dotfiles/blob/$head/$self_dir/$self
    ["-c $head_short -p "$self" -r"]=https://github.com/agross/dotfiles/blob/$head/$self_dir/$self
    ['-c git-gh-tag']=https://github.com/agross/dotfiles/tree/git-gh-tag
    ['-c git-gh-tag -r']=https://github.com/agross/dotfiles/tree/$head
    ['-c git-gh-tag -p .']=https://github.com/agross/dotfiles/tree/git-gh-tag/$self_dir
    ['-c git-gh-tag -p . -r']=https://github.com/agross/dotfiles/tree/$head/$self_dir
    ["-c git-gh-tag -p "$self""]=https://github.com/agross/dotfiles/blob/git-gh-tag/$self_dir/$self
    ["-c git-gh-tag -p "$self" -r"]=https://github.com/agross/dotfiles/blob/$head/$self_dir/$self
    ['-c git-gh-tag-annotated']=https://github.com/agross/dotfiles/tree/git-gh-tag-annotated
    ['-c git-gh-tag-annotated -r']=https://github.com/agross/dotfiles/tree/$head
    ['-c git-gh-tag-annotated -p .']=https://github.com/agross/dotfiles/tree/git-gh-tag-annotated/$self_dir
    ['-c git-gh-tag-annotated -p . -r']=https://github.com/agross/dotfiles/tree/$head/$self_dir
    ["-c git-gh-tag-annotated -p "$self""]=https://github.com/agross/dotfiles/blob/git-gh-tag-annotated/$self_dir/$self
    ["-c git-gh-tag-annotated -p "$self" -r"]=https://github.com/agross/dotfiles/blob/$head/$self_dir/$self
  )

  trap 'git tag -d git-gh-tag git-gh-tag-annotated; popd > /dev/null' EXIT

  git tag git-gh-tag "$head"
  git tag --annotate --message=42 git-gh-tag-annotated "$head"

  local status key expected output color
  status=0
  for key in "${!tests[@]}"; do
    printf '%s\n' "$key"

    expected="${tests[$key]}"
    output="$(./"$self" $key)"
    if [[ "$output" == "$expected" ]]; then
      color='\e[1;32m'
    else
      status=1
      color='\e[1;31m'
    fi

    printf '%bexpected: %s \n     was: %s%b\n' "$color" "$expected" "$output" '\e[0m'
  done

  exit $status
}

resolve() {
  local revision="$1"

  # Assume current branch or HEAD if nothing was given.
  if [[ -z "$revision" ]]; then
    revision="$(git symbolic-ref --short --quiet HEAD || git rev-parse HEAD)"
  fi

  # Transform short hashes into extended hashes.
  extended="$(git rev-parse --verify "$revision")"
  if [[ "$extended" == $revision* ]]; then
    revision="$extended"
  fi

  if [[ -v revision_as_sha ]]; then
    revision="$(git rev-parse --verify "$revision^{commit}")"
  fi

  printf '%s' "$revision"
}

if [[ -v selftest ]]; then
  selftest
fi

if [[ -v revision || -v revision_as_sha || -v path ]]; then
  resolved="$(resolve "${revision:-}")"
fi

if [[ -v path ]]; then
  path="$(git rev-parse --show-prefix)$path"
  [[ "$path" == */. ]] && path="${path%/.}"

  type="$(git cat-file -t "$resolved:$path")"
  path="/$type/$resolved/$path"
elif [[ -v revision ]]; then
  # Tags need /tree/tagname.
  if [[ -n "$(git tag --list "$revision")" ]]; then
    type=tree
  else
    type="$(git cat-file -t "$revision")"
  fi

  path="/$type/$resolved"
fi

shift $((OPTIND - 1))

if [[ -z "${1:-}" ]]; then
  for url in $(git remote 2> /dev/null | xargs --max-args 1 git remote get-url --all 2> /dev/null); do
    case "$url" in
      https://github.com/*)
        repo="${url#https://github.com/}"
        ;;
      git@github.com:*)
        repo="${url#git@github.com:}"
        ;;
    esac

    [[ -v repo ]] && repo="${repo%.git}"
  done
fi

url=https://github.com/${repo:-${1?Need GitHub username/repo}}${path:-}

if [[ ! -t 1 ]]; then
  printf '%s' "$url"
  exit
fi

case "$OSTYPE" in
  cygwin)
    program=cygstart
    ;;

  darwin*)
    program=open
    ;;

  linux*)
    program=gnome-open
    ;;

  *)
    >&2 printf 'Unsupported platform: %s. Please open manually: %s\n' "$OSTYPE" "$url"
    exit 1
    ;;
esac

"$program" "$url"
