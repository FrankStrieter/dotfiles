#!/usr/bin/env zsh

case $1 in
  config)
    command=config
    ;;

  logs)
    command=logs
    ;;

  cleanup)
    command=cleanup
    ;;

  *)
    command=usage
    ;;
esac

if [[ $command != usage ]]; then
  shift 1
fi

git-training::usage() {
  if [[ -n $1 ]]; then
    printf 'Unsupported command: %s\n\n' "$1"
  fi

  printf 'Supported commands:\n'
  printf '  config  Manage temporary git configuration\n'
  printf '  logs    Convert shell logs to HTML\n'
  printf '  cleanup Undo Pull Request demo, remove samples, reset VS Code\n'

  return 1
}

git-training::config::find-stash() {
  local entry

  if entry="$(git -C "$(dirname "$git_config")" \
                  stash \
                  list \
                  --grep='git-training config' \
                  --max-count=1 \
                  --pretty=%gD)"; then
    if [[ -z "$entry" ]]; then
      return 2
    fi

    printf '%s' "$entry"
    return
  fi

  return 1
}

git-training::config::pop() {
  if ! entry="$(git-training::config::find-stash)"; then
    printf 'No stash entry for git-training config\n'
    return 1
  fi

  git -C "$(dirname "$git_config")" \
      stash \
      pop \
      "$entry"
}

git-training::config() {
  local git_config="$(readlink --canonicalize-existing "$HOME/.gitconfig")"

  case "$1" in
    --reset)
      git -C "$(dirname "$git_config")" \
          checkout \
          -- \
          "$(basename "$git_config")"
      ;;

    --stash)
      git -C "$(dirname "$git_config")" \
          stash \
          push \
          --message 'git-training config' \
          -- \
          "$(basename "$git_config")"
      ;;

    --pop)
      git-training::config::pop
      ;;

    *)
      # Only enable training config if ~/.gitconfig is unchanged
      # (i.e. first day of training).
      if git -C "$(dirname "$git_config")" \
             diff-index \
             --quiet \
             HEAD \
             -- \
             "$(basename "$git_config")"; then

        # If there is a stash entry, apply it.
        if entry="$(git-training::config::find-stash)"; then
          git-training::config::pop
          printf 'git training config enabled\n'
          return
        fi

        cp "$git_config.training" "$HOME/.gitconfig" && \
          printf 'git training config enabled\n'
      else
        printf '%s is modified, not enabling git training config\n' "$git_config"
        return 1
      fi
      ;;
  esac
}

git-training::logs() {
  if [[ "$1" == '--clear' ]]; then
    rm --interactive -- ~/*_*.zsh\ Trainings.*.log(N.on)
    return $?
  fi

  local day="${1?Need day index}"
  local offset="${2:-now}"

  local part=1
  local log
  # Normal files, sorted by name, prevent warning when there are no files.
  for log in ~/$(date --date="$offset" +%Y%m%d)_*.zsh\ Trainings.*.log(N.on); do
    du -h $log
    printf 'Convert part %s? [y/N]\n' $part
    if ! read -qs; then
      continue
    fi

    ansifilter --input "$log" \
               --output "$HOME/Downloads/Tag $day Teil $part.html" \
               --html \
               --doc-title "Tag $day Teil $part" \
               --encoding utf-8 \
               --font 'Menlo, Monaco, Consolas, Courier New, monospace'

    cp "$log" "$HOME/Downloads/Tag $day Teil $part.log"

    part=$((part + 1))
  done
}

git-training::cleanup() {
  rm -rf ~/git-schulung

  git training config --reset

  local dir=$(mktemp --directory)
  trap "rm -rf $dir" EXIT SIGHUP SIGINT SIGTERM

  remote=git@github.com:Archivists/archive-bundler
  branch=refs/heads/master
  reset_to=a838142

  if ! git ls-remote \
           --refs \
           --heads \
           --exit-code \
           $remote \
           $branch |
       grep --quiet "^$reset_to"; then
    git clone $remote $dir && \
    git -C $dir push --force origin $reset_to:$branch
  fi

  printf '\n'
  curl --include \
       --request DELETE \
       --header "Authorization: token $GITHUB_DELETE_REPO_API_TOKEN" \
       https://api.github.com/repos/agross/archive-bundler
}

git-training::$command "$@"
