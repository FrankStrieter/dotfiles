#!/usr/bin/env zsh

case $1 in
  config)
    shift 1
    command=config
    ;;

  logs)
    shift 1
    command=logs
    ;;

  pr)
    shift 1
    command=pr
    ;;

  *)
    command=usage
    ;;
esac

git-training::usage() {
  if [[ -n $1 ]]; then
    printf 'Unsupported command: %s\n' "$1"
  fi

  printf '\nSupported commands:\n'
  printf '  config  Manage git configuration\n'
  printf '  logs    Convert shell logs to HTML\n'
  printf '  pr      Undo Pull Request demo\n'

  return 1
}

git-training::config() {
  local git_config="$(readlink --canonicalize-existing "$HOME/.gitconfig")"

  if [[ "$1" == 'reset' ]]; then
    git -C "$(dirname "$git_config")" checkout -- "$(basename "$git_config")"
    return $?
  fi

  # Only enable training config if ~/.gitconfig is unchanged (first day of training).
  if git -C "$(dirname "$git_config")" diff-index --quiet HEAD -- "$(basename "$git_config")"; then
    cp "$git_config.training" "$HOME/.gitconfig" && \
      printf 'git training config enabled\n'
  else
    printf '%s is modified, not enabling git training config\n' "$git_config"
    return 1
  fi
}

git-training::logs() {
  if [[ "$1" == 'clear' ]]; then
    rm --interactive -- ~/*_*.zsh\ Trainings.*.log(N.on)
    return $?
  fi

  local day="${1?Need day index}"
  local offset="${2:-now}"

  local part=1
  local log
  # Normal files, sorted by name, prevent warning when there are no files.
  for log in ~/$(date --date="$offset" +%Y%m%d)_*.zsh\ Trainings.*.log(N.on); do
    du -h $log
    printf 'Convert part %s? [y/N]\n' $part
    if ! read -qs; then
      continue
    fi

    ansifilter --input "$log" \
               --output "$HOME/Downloads/Tag $day Teil $part.html" \
               --html \
               --doc-title "Tag $day Teil $part" \
               --encoding utf-8 \
               --font 'Menlo, Monaco, Consolas, Courier New, monospace'

    cp "$log" "$HOME/Downloads/Tag $day Teil $part.log"

    part=$((part + 1))
  done
}

git-training::pr() {
  local dir=$(mktemp --directory)
  trap "rm -rf $dir" EXIT SIGHUP SIGINT SIGTERM

  pushd -q $dir && \
    git clone git@github.com:Archivists/archive-bundler . && \
    git push --force origin a838142:refs/heads/master
  popd -q

  printf '\n'
  curl --include \
       --request DELETE \
       --header "Authorization: token $GITHUB_DELETE_REPO_API_TOKEN" \
       https://api.github.com/repos/agross/archive-bundler
}

git-training::$command "$@"
