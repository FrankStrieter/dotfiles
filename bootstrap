#!/usr/bin/env bash
#
# bootstrap installs things.
#
# Graciously taken from https://github.com/holman/dotfiles.

# Fail on errors.
set -e

# Show executed commands.
# set -x

light_red="\e[01;31m"
green="\e[0;32m"
light_green="\e[01;32m"
light_yellow="\e[01;33m"
cyan="\e[0;36m"
light_cyan="\e[01;36m"
reset_color="\e[0m"
clear_line="\e[2K"

info () {
  printf   "\r  [%b INFO %b] %b\n" $light_cyan $reset_color "$1"
}

user () {
  printf   "\r  [%b  ?   %b] %b " $light_yellow $reset_color "$1"
}

success () {
  printf "\r%b  [%b  OK  %b] %b\n" $clear_line $light_green $reset_color "$1"
}

fail () {
  printf "\r%b  [%b FAIL %b] %b\n\n" $clear_line $light_red $reset_color "$1"
  exit 1
}

platforms () {
  if [ -n "$platforms_cache" ]; then
    printf "$platforms_cache"
    return
  fi

  if [ "$(uname)" == "Darwin" ]; then
    printf 'mac'
  elif [ "$(uname -s)" == "Linux" ]; then
    printf 'linux'
  elif [ "$(uname -s)" == "FreeBSD" ]; then
    printf 'freebsd'
  elif [ "$(uname -o)" == "Cygwin" ]; then
    printf "cygwin\nwindows"
  elif [ "$(uname -o)" == "Msys" ]; then
    printf 'msys'
  else
    printf 'unknown'
  fi
}
# Cache value.
export platforms_cache="$(platforms)"

readlink_e () {
  local file=$1

  if [ "$(platforms)" == 'freebsd' -o "$(platforms)" == 'mac' ]; then
    printf "$(realpath "$file")"
    return $?
  fi

  printf "$(readlink --canonicalize-existing "$file")"
}

home_directory () {
  local platform=$1

  case "$platform" in
    mac|linux|msys|cygwin|freebsd )
      home=$HOME
      ;;
    windows )
      home="$(printf "%s" "$(cygpath --unix $USERPROFILE)")"
      ;;
    * )
      fail "$(printf "Cannot determine home directories for platform %b%s%b" $green "$platform" $reset_color)"
      ;;
  esac
}

platform_excluded () {
  local topic=$1
  local platform=$2
  local exclude_file="$topic/.exclude-platforms"

  if [ ! -f "$exclude_file" ]; then
    return 1
  fi

  if [ -n "$(/bin/grep "$platform" "$exclude_file")" ]; then
    return 0
  fi

  return 1
}

link_file () {
  local src=$1
  local dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local current_src="$(readlink_e "$dst")"

      if [ "$current_src" == "$src" ]; then
        skip=true;
      else
        user "$(printf "File already exists: %b%s%b (%b%s%b)
           Will be linked to: %b%s%b
           What do you want to do? (%bs%b)kip, (%bS%b)kip all, (%bo%b)verwrite, (%bO%b)verwrite all, (%bb%b)ackup, (%bB%b)ackup all?" \
           $green "$dst" $reset_color \
           $cyan "$(file --brief "$dst")" $reset_color \
           $green "$src" $reset_color \
           $light_yellow $reset_color \
           $light_yellow $reset_color \
           $light_yellow $reset_color \
           $light_yellow $reset_color \
           $light_yellow $reset_color \
           $light_yellow $reset_color)"

        while true; do
          # Read from tty, needed because we read in outer loop.
          read -n 1 action < /dev/tty

          case "$action" in
            o )
              overwrite=true
              break
              ;;
            O )
              overwrite_all=true
              break
              ;;
            b )
              backup=true
              break
              ;;
            B )
              backup_all=true
              break
              ;;
            s )
              skip=true
              break
              ;;
            S )
              skip_all=true
              break
              ;;
            * )
              ;;
          esac
        done
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "$(printf "Removed %b%s%b" $green "$dst" $reset_color)"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "$(printf "Moved %b%s%b to %b%s%b" $green "$dst" $reset_color $green "${dst}.backup" $reset_color)"
    fi

    if [ "$skip" == "true" ]; then
      success "$(printf "Skipped %b%s%b == %b%s%b" $green "$src" $reset_color $green "$dst" $reset_color)"
    fi
  fi

  if [ "$skip" != "true" ]; then  # "false" or empty
    # Create native symlinks on Windows.
    export CYGWIN=winsymlinks:nativestrict
    ln -s "$1" "$2"

    success "$(printf "Linked %b%s%b to %b%s%b" $green "$1" $reset_color $green "$2" $reset_color)"
  fi
}

install_dotfiles () {
  local dotfiles_root="$(dirname "$(readlink_e "$0")")"

  local overwrite_all=false backup_all=false skip_all=false

  info "$(printf "Installing dotfiles from %b%s%b" $green "$dotfiles_root" $reset_color)"

  local platforms="$(platforms)"
  while IFS=$'\n' read -r platform; do
    local home
    home_directory "$platform"

    echo
    info "$(printf "Installing dotfiles in %b%s%b for platform %b%s%b" $green "$home" $reset_color $green "$platform" $reset_color)"

    # First, add a symlink for this dotfiles directory.
    local dotfiles="$home/.dotfiles"
    link_file "$dotfiles_root" "$dotfiles"

    # Find direct child directories (topics), exclude those starting with dots.
    local topics="$(/usr/bin/find "$dotfiles_root" -mindepth 1 -maxdepth 1 -type d -not -name '\.*')"
    while IFS=$'\n' read -r topic; do
      [[ -z "$topic" ]] && continue

      if platform_excluded "$topic" "$platform"; then
        info "$(printf "Skipped %b%s%b as it is excluded for platform %b%s%b" $green "$topic" $reset_color $green "$platform" $reset_color)"
        continue
      fi

      # Find files and directories named *.symlink below each topic directory, exclude dot files.
      local symlinks="$(/usr/bin/find "$topic" -mindepth 1 -maxdepth 1 \( -type f -or -type d \) -name '*.symlink' -not -name '\.*')"
      while IFS=$'\n' read -r src; do
        [[ -z "$src" ]] && continue

        dst="$home/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
      done <<< "$symlinks"

      # Run optional install script.
      local install="$topic/.install.sh"
      if [ -x "$install" ]; then
        info "$(printf "Running %b%s%b" $green "$install" $reset_color)"
        sh -c "$install"
      fi
    done <<< "$topics"
  done <<< "$platforms"

  echo
  info "$(printf "All installed from %b%s%b" $green "$dotfiles_root" $reset_color)"
}

install_dotfiles
